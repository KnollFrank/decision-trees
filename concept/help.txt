Entscheidungsbäume
==================

- https://machinelearningmastery.com/implement-decision-tree-algorithm-scratch-python/
- https://medium.com/@penggongting/implementing-decision-tree-from-scratch-in-python-c732e7c69aea
- http://sigmajs.org/
- https://lamastex.github.io/scalable-data-science/sds/2/2/db/016_SupervisedClustering_DecisionTrees_HandWrittenDigitRecognition/
- https://transcranial.github.io/keras-js/#/mnist-cnn

C:\Users\Alfa\AppData\Local\Programs\Python\Python38-32\python.exe

Abhängigkeiten:
- https://www.papaparse.com/
- https://visjs.org/ oder https://almende.github.io/vis/
- https://datatables.net/

Install:
npm init
npm install express
npm install formidable

Um Dateiänderungen im laufenden Node.js-Betrieb aufzunehmen:
npm install -g nodemon
nodemon webserver.js

node webserver.js

FK-TODO:
- Laden/Speichern eines Modells für Entscheidungsbäume (= Graph)
- avoiding some of the unnecessary splits:
  Thanks for the post, code, and all the follow ups! I also was wondering about avoiding some of the unnecessary splits at the bottom of the tree. In case others are curious, one short addition to the code would be to add
  if len(class_values) == 1: return to_terminal(dataset)
  as the second line of get_split, and then
  if not isinstance(node, dict): return
  at the beginning of split.
  It looks like this avoids unnecessary splitting in the example given and in some other datasets.
  Thanks again!
- Aufteilung des Datensatzes in 80% Trainingsdaten und 20% Testdaten
- FIXME: Beim Neuladen eines Datensatzes sollen alle anderen "Felder" (Baum, Accuracy, Dateneingabe, ...) geleert bzw. neu berechnet werden.
  Bisheriger Fehler:
  TypeError: document.querySelector(...) is null2 main.js:71:28
    getInputNumberById http://127.0.0.1:5500/part2/project/js/main.js:71
    map self-hosted:291
    getInputNumbersById http://127.0.0.1:5500/part2/project/js/dataInput.js:24
    displayDataInput http://127.0.0.1:5500/part2/project/js/dataInput.js:11
- UI verschönern
- Togglebutton einbauen, um die Berechnung des Entscheidungsbaums
  1. lokal im Browser durchzuführen oder
  2. mit node.js auf dem Server durchzuführen. Progressbar für den aktuellen Stand des Algorithmus dann mit Websockets auf dem Client anzeigen.
     - Datei für die Eingabedaten auf den server hochladen
	 - build_tree auf dem Server ausführen
	 - Ergebnis von build_tree an den Client zurücksenden
- build_tree auf mehrere Browser aufteilen, jeder Browser berechnet einen Kindknoten.
- Progressbar für den aktuellen Stand des Trainings des Entscheidungsbaums
  - Schon während des Trainings die dazugefügten Knoten und Kanten grafisch anzeigen in einem Einzelschrittmodus.
- unnötige Knoten und Kanten entfernen, z.B.:
  node ---true----> 0
    |-----false---> 0
  wird zu:
  0
  weil unabhängig vom Wahrheitswert der Auswertung von node das Ergebnis immer 0 ist.
  Diese Operation so oft wiederholen, bis sie sich nicht mehr anwenden läßt.
